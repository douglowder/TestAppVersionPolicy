diff --git a/node_modules/expo-updates/plugin/build/withUpdates.js b/node_modules/expo-updates/plugin/build/withUpdates.js
index 618c37f..f33849b 100644
--- a/node_modules/expo-updates/plugin/build/withUpdates.js
+++ b/node_modules/expo-updates/plugin/build/withUpdates.js
@@ -3,10 +3,25 @@ Object.defineProperty(exports, "__esModule", { value: true });
 const config_1 = require("@expo/config");
 const config_plugins_1 = require("expo/config-plugins");
 const pkg = require('expo-updates/package.json');
+function modifyAndroidManifest(config, manifest) {
+    const { addMetaDataItemToMainApplication, getMainApplicationOrThrow, removeMetaDataItemFromMainApplication, } = config_plugins_1.AndroidConfig.Manifest;
+    // Fix up Android runtime version to ensure value is parsed correctly by UpdatesConfiguration (see #13365)
+    const app = getMainApplicationOrThrow(manifest);
+    if (typeof config.runtimeVersion !== 'string' && config.runtimeVersion?.policy === 'appVersion') {
+        removeMetaDataItemFromMainApplication(app, 'expo.modules.updates.EXPO_RUNTIME_VERSION');
+        addMetaDataItemToMainApplication(app, 'expo.modules.updates.EXPO_RUNTIME_VERSION', `string:${config.version}`, 'value');
+    }
+    return manifest;
+}
+;
 const withUpdates = (config, props = {}) => {
     // The username will be passed from the CLI when the plugin is automatically used.
     const expoUsername = (props || {}).expoUsername ?? (0, config_1.getAccountUsername)(config);
     config = config_plugins_1.AndroidConfig.Updates.withUpdates(config, { expoUsername });
+    config = (0, config_plugins_1.withAndroidManifest)(config, async (config) => {
+        config.modResults = modifyAndroidManifest(config, config.modResults);
+        return config;
+    });
     config = config_plugins_1.IOSConfig.Updates.withUpdates(config, { expoUsername });
     return config;
 };
diff --git a/node_modules/expo-updates/plugin/src/withUpdates.ts b/node_modules/expo-updates/plugin/src/withUpdates.ts
index e094cab..2c89267 100644
--- a/node_modules/expo-updates/plugin/src/withUpdates.ts
+++ b/node_modules/expo-updates/plugin/src/withUpdates.ts
@@ -1,13 +1,48 @@
 import { getAccountUsername } from '@expo/config';
-import { ConfigPlugin, createRunOncePlugin, AndroidConfig, IOSConfig } from 'expo/config-plugins';
+import { ExpoConfig } from '@expo/config-types';
+import {
+  ConfigPlugin,
+  createRunOncePlugin,
+  AndroidConfig,
+  IOSConfig,
+  withAndroidManifest,
+} from 'expo/config-plugins';
 
 const pkg = require('expo-updates/package.json');
 
+function modifyAndroidManifest(
+  config: ExpoConfig,
+  manifest: AndroidConfig.Manifest.AndroidManifest
+): AndroidConfig.Manifest.AndroidManifest {
+  const {
+    addMetaDataItemToMainApplication,
+    getMainApplicationOrThrow,
+    removeMetaDataItemFromMainApplication,
+  } = AndroidConfig.Manifest;
+  // Fix up Android runtime version to ensure value is parsed correctly by UpdatesConfiguration (see #13365)
+  const app = getMainApplicationOrThrow(manifest);
+  if (typeof config.runtimeVersion !== 'string' && config.runtimeVersion?.policy === 'appVersion') {
+    removeMetaDataItemFromMainApplication(app, 'expo.modules.updates.EXPO_RUNTIME_VERSION');
+    addMetaDataItemToMainApplication(
+      app,
+      'expo.modules.updates.EXPO_RUNTIME_VERSION',
+      `string:${config.version}`,
+      'value'
+    );
+  }
+  return manifest;
+};
+
+
 const withUpdates: ConfigPlugin<{ expoUsername?: string } | void> = (config, props = {}) => {
   // The username will be passed from the CLI when the plugin is automatically used.
   const expoUsername = (props || {}).expoUsername ?? getAccountUsername(config);
 
   config = AndroidConfig.Updates.withUpdates(config, { expoUsername });
+  config = withAndroidManifest(config, async (config) => {
+    config.modResults = modifyAndroidManifest(config, config.modResults);
+    return config;
+  });
   config = IOSConfig.Updates.withUpdates(config, { expoUsername });
   return config;
 };
